{"version":3,"file":"static/js/252.30023663.chunk.js","mappings":"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","sources":["common/components/card/Card.tsx","common/components/status/Status.tsx","common/components/title/TitleOptions.tsx","common/components/title/Title.ts","common/components/card/Skeleton.tsx","common/components/button/Button.tsx","common/components/accordion/Accardion.tsx","common/components/options/Options.tsx","layout/characters/FormForSearchElement/FormForSearchElement.tsx","layout/characters/Characters.tsx","styles/ThemeUtils.ts"],"sourcesContent":["// @flow\r\nimport * as React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Status} from \"../status/Status\";\r\nimport {useTheme} from \"../../../app/ThemeContextProvider\";\r\nimport {getTextColor} from \"../../../styles/ThemeUtils\";\r\nimport {theme} from \"../../../styles/Theme\";\r\n\r\ntype Props = {\r\n  img: string\r\n  name: string\r\n  location: string\r\n  status: string\r\n};\r\nexport const lightThemeText = theme.lightTheme.text\r\nexport const darkThemeText = theme.darkTheme.text\r\nexport const lightThemeBackgroundColor =  theme.lightTheme.firstBg\r\nexport const darkThemeBackgroundColor =theme.darkTheme.firstBg\r\n\r\nexport const Card = (props: Props) => {\r\n  const {enterTheme} = useTheme()\r\n  return (\r\n    <StyledProjectsCard status={props.status} enterTheme={enterTheme}>\r\n      <WrapperImg>\r\n        <Image src={props.img} alt={props.name}/>\r\n        <StatusWrapper>\r\n          <Status status={props.status}/>\r\n        </StatusWrapper>\r\n      </WrapperImg>\r\n      <WrapperInfo>\r\n        <CharacterName enterTheme={enterTheme}>{props.name}</CharacterName>\r\n        <CartText enterTheme={enterTheme}>Last Location</CartText>\r\n        <CartText enterTheme={enterTheme}>{props.location}</CartText>\r\n      </WrapperInfo>\r\n    </StyledProjectsCard>\r\n  );\r\n};\r\n\r\n\r\nconst StyledProjectsCard = styled.div<{ status: string, enterTheme: string }>`\r\n    border-radius: 8px;\r\n    background-color: ${({enterTheme}) => getTextColor(enterTheme, lightThemeBackgroundColor, darkThemeBackgroundColor)};\r\n    border: 2px solid blue;\r\n    width: 220px;\r\n    box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.25);\r\n\r\n    @media ${theme.media.tablet} {\r\n        width: 300px;\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        width: 300px;\r\n    }\r\n`\r\nconst CharacterName = styled.p<{ enterTheme: string }>`\r\n    font-weight: 600;\r\n    font-size: 24px;\r\n    color: ${({enterTheme}) => getTextColor(enterTheme, lightThemeText, darkThemeText)};\r\n`\r\nconst CartText = styled.p<{ enterTheme: string }>`\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    color: ${({enterTheme}) => getTextColor(enterTheme, lightThemeText, darkThemeText)};\r\n`\r\n\r\nconst WrapperImg = styled.div`\r\n    position: relative;\r\n    margin-bottom: 16px;\r\n`;\r\n\r\nconst StatusWrapper = styled.div`\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    border-radius: 6px 6px 0 0;\r\n    object-fit: cover;\r\n`;\r\n\r\nconst WrapperInfo = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\n\r\n\r\n","// @flow\r\nimport * as React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\ntype Props = {\r\n  status?: string\r\n};\r\n\r\nexport const Status = ({status}: Props) => {\r\n  return (\r\n    <StyledStatus $status={status}>\r\n      {status}\r\n    </StyledStatus>\r\n  );\r\n};\r\n\r\nconst StyledStatus = styled.div<{ $status?: string }>`\r\n    background-color: ${(props) => {\r\n        switch (props.$status) {\r\n            case \"Alive\":\r\n                return \"green\";\r\n            case \"Dead\":\r\n                return \"red\";\r\n            default:\r\n                return \"gray\";\r\n        }\r\n    }};\r\n    color: white;\r\n    padding: 5px 10px;\r\n    border-radius: 4px;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    z-index: 1;\r\n    opacity: 0.7;\r\n`","import styled from \"styled-components\";\r\nimport {theme} from \"../../../styles/Theme\";\r\nimport {getTextColor} from \"../../../styles/ThemeUtils\";\r\n\r\nexport const lightThemeText = theme.lightTheme.text\r\nexport const darkThemeText = theme.darkTheme.text\r\n\r\nexport const TitleOptions = styled.h3<{ enterTheme: string }>`\r\n    font-weight: 500;\r\n    font-size: 30px;\r\n    color: ${({enterTheme}) => getTextColor(enterTheme, lightThemeText, darkThemeText)};\r\n    margin: 0 0 10px 0;\r\n    text-align: center;\r\n}\r\n`","import styled from \"styled-components\";\r\nimport {theme} from \"../../../styles/Theme\";\r\n\r\n\r\nexport const Title = styled.h2<{enterTheme: string}>`\r\n    font-weight: 500;\r\n    font-size: calc(2rem + 1.5vw);\r\n    color: ${props => props.enterTheme === \"light\" ? theme.lightTheme.text : theme.darkTheme.text};\r\n    margin: 0 0 20px;\r\n`","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nexport const Skeleton = () => {\r\n  return (\r\n  <StyledSkeletonCard>\r\n    <SkeletonImage />\r\n    <SkeletonInfo>\r\n      <SkeletonText width=\"60%\" />\r\n      <SkeletonText width=\"40%\" />\r\n      <SkeletonText width=\"80%\" />\r\n    </SkeletonInfo>\r\n  </StyledSkeletonCard>\r\n\r\n  );\r\n};\r\n\r\nconst loading = keyframes`\r\n    0% {\r\n        background-position: -200px 0;\r\n    }\r\n    100% {\r\n        background-position: 200px 0;\r\n    }\r\n`;\r\n\r\nconst SkeletonBlock = styled.div`\r\n    background: linear-gradient(90deg, #eee 25%, #ddd 50%, #eee 75%);\r\n    background-size: 200% 100%;\r\n    animation: ${loading} 1.5s infinite;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst StyledSkeletonCard = styled.div`\r\n  border-radius: 8px;\r\n  border: 2px solid #ddd;\r\n  max-width: 220px;\r\n  width: 100%;\r\n  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst SkeletonImage = styled(SkeletonBlock)`\r\n  width: 100%;\r\n  height: 250px;\r\n  border-radius: 6px 6px 0 0;\r\n`;\r\n\r\nconst SkeletonInfo = styled.div`\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n`;\r\n\r\nconst SkeletonText = styled(SkeletonBlock)<{ width: string }>`\r\n  height: 18px;\r\n  width: ${(props) => props.width};\r\n`;\r\n\r\n","import * as React from 'react';\r\nimport {ButtonHTMLAttributes, FC, PropsWithChildren} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {theme} from \"../../../styles/Theme\";\r\n\r\ntype ButtonProps = PropsWithChildren<ButtonHTMLAttributes<HTMLButtonElement>> & {\r\n  bgColor?: string;\r\n  border?: string;\r\n  disableHover?: boolean;\r\n  isClicked?:boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n                                          children,\r\n                                          isClicked=false,\r\n                                          onClick,\r\n                                          title,\r\n                                          bgColor = \"transparent\",\r\n                                          border,\r\n                                          color = \"#3b82f6\",\r\n                                          disableHover = false,\r\n                                          ...props\r\n                                        }) => {\r\n\r\n\r\n  return (\r\n    <StyledButton\r\n      isClicked={isClicked}\r\n      onClick={onClick}\r\n      border={border}\r\n      disableHover={disableHover}\r\n      bgColor={bgColor}\r\n      color={color}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nconst StyledButton = styled.button<{ border?: string, disableHover: boolean, bgColor: string, color: string, isClicked: boolean }>`\r\n    background-color: ${({isClicked}) => isClicked ? \"#3b82f6\" : \"transparent\"};\r\n    color: ${({isClicked}) => isClicked ? \"white\" : \"#3b82f6\"};\r\n    border: ${({border}) => (border !== undefined ? border : \"2px solid #3b82f6\")};\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    padding: 10px 20px;\r\n    &:hover {\r\n        ${({disableHover}) =>\r\n                disableHover\r\n                        ? \"background-color: transparent; color: ${theme.colors.accent};\"\r\n                        : `\r\n            background-color: #3b82f6;\r\n            color: white;\r\n        `\r\n        }\r\n        transition: 0.3s ease-in-out;\r\n    }   \r\n    \r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"../../../styles/Theme\";\r\n\r\ntype AccordionProps = {\r\n  title: string;\r\n  children: React.ReactNode;\r\n  onClick?: () => void;\r\n  isOpen: boolean;\r\n  setIsOpen: (isOpen: boolean)=>void;\r\n};\r\n\r\nexport const Accordion = ({title, children, setIsOpen,isOpen}: AccordionProps) => {\r\n\r\n\r\n\r\n\r\n  const handlerOnClick = () =>{\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <StyledAccordion >\r\n      <AccordionHeader onClick={handlerOnClick}>\r\n        {title}\r\n        <Arrow isOpen={isOpen}>▼</Arrow>\r\n      </AccordionHeader>\r\n      {isOpen && <AccordionContent>{children}</AccordionContent>}\r\n    </StyledAccordion>\r\n  );\r\n};\r\n\r\nconst StyledAccordion = styled.div`\r\n    border: 2px solid ${theme.colors.buttonBg};\r\n    border-radius: 2px;\r\n    overflow: hidden;\r\n    max-width: 400px;\r\n    width: 100%;\r\n    @media ${theme.media.tablet} {\r\n        min-width: 700px;        \r\n    }\r\n    @media ${theme.media[\"750\"]} {\r\n        min-width: 400px;\r\n    }\r\n    @media ${theme.media[\"450\"]} {\r\n        min-width: 300px;\r\n    }\r\n`;\r\n\r\nconst AccordionHeader = styled.div`\r\n    background-color: ${theme.colors.buttonBg};\r\n    color: ${theme.lightTheme.body};\r\n    padding: 12px 16px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    cursor: pointer;\r\n    user-select: none;\r\n`;\r\n\r\nconst Arrow = styled.span<{ isOpen: boolean }>`\r\n    transition: transform 0.3s;\r\n    transform: ${({isOpen}) => (isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\")};\r\n`;\r\n\r\nconst AccordionContent = styled.div`\r\n    padding: 12px 16px;\r\n    background: white;\r\n    color: #333;\r\n`;\r\n\r\n","// @flow\r\nimport * as React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Button} from \"../button/Button\";\r\nimport {Accordion} from \"../accordion/Accardion\";\r\nimport {FlexWrapper} from \"../FlexWrapper\";\r\nimport {TitleOptions} from \"../title/TitleOptions\";\r\nimport {useState} from \"react\";\r\nimport {useTheme} from \"../../../app/ThemeContextProvider\";\r\n\r\ntype Props = {\r\n\r\n  handleClick: (status: string, title: string) => void\r\n  clearFilters: () => void;\r\n  filters: {status: string, gender: string, species: string}\r\n};\r\n\r\nexport const Options = ({handleClick, clearFilters, filters}: Props) => {\r\n\r\n  const {enterTheme}= useTheme()\r\n\r\n  const [openAccordion, setOpenAccordion] = useState<string | null>(null);\r\n\r\n  const [selected, setSelected] = useState({\r\n    status: \"\",\r\n    species: \"\",\r\n    gender: \"\",\r\n  });\r\n\r\n  const handleClickButtonStatus = (category: \"status\" | \"species\" | \"gender\", value: string, word: string) => {\r\n    setSelected((prev) => ({\r\n      ...prev,\r\n      [category]: prev[category] === value ? \"\" : value, // Если нажали ту же — сбрасываем\r\n    }));\r\n\r\n    handleClick(value, category);\r\n    setSelected({...selected, [category]: word});\r\n  };\r\n\r\n  const toggleAccordion = (title: string) => {\r\n    setOpenAccordion(openAccordion === title ? null : title)\r\n  }\r\n\r\n  const arrayNamesButtonsForStatus = [\r\n    \"Alive\", \"Dead\", \"Unknown\"\r\n  ]\r\n\r\n  const arrayNamesButtonsForSpecies = [\r\n    \"Alien\",\r\n    \"Humanoid\",\r\n    \"Poopybutthole\",\r\n    \"Mythological\",\r\n    \"Animal\",\r\n    \"Disease\",\r\n    \"Robot\",\r\n    \"Cronenberg\",\r\n    \"Planet\",\r\n    \"Unknown\"\r\n  ]\r\n  const arrayNamesButtonsForGender = [\r\n    \"female\",\r\n    \"male\",\r\n    \"genderless\",\r\n    \"unknown\"\r\n  ]\r\n\r\n  return (\r\n    <StyledOptions>\r\n      <Wrapper>\r\n        <TitleOptions enterTheme={enterTheme}>Filters</TitleOptions>\r\n        <Button onClick={clearFilters} border={\"none\"} disableHover={true}>Clear Filters</Button>\r\n      </Wrapper>\r\n\r\n      <Accordion isOpen={openAccordion === \"Status\"} setIsOpen={() => toggleAccordion(\"Status\")} title={\"Status\"}>\r\n        <FlexWrapper justify={\"space-between\"} wrap={\"wrap\"} gap={\"10px\"}>\r\n          {arrayNamesButtonsForStatus.map((item, index) => (\r\n            <Button\r\n              key={item}\r\n              isClicked={filters.status === item.toLowerCase()}\r\n              onClick={() => handleClickButtonStatus(\"status\", item.toLowerCase(), item)}\r\n            >\r\n              {item}\r\n            </Button>\r\n          ))}\r\n        </FlexWrapper>\r\n      </Accordion>\r\n\r\n      <Accordion isOpen={openAccordion === \"Species\"} setIsOpen={() => toggleAccordion(\"Species\")} title={\"Species\"}>\r\n        <FlexWrapper justify={\"space-between\"} wrap={\"wrap\"} gap={\"10px\"}>\r\n          {arrayNamesButtonsForSpecies.map((item, index) => (\r\n            <Button\r\n              key={item}\r\n              isClicked={filters.species === item.toLowerCase()}\r\n              onClick={() => handleClickButtonStatus(\"species\", item.toLowerCase(), item)}\r\n            >\r\n              {item}\r\n            </Button>\r\n          ))}\r\n        </FlexWrapper>\r\n      </Accordion>\r\n\r\n      <Accordion isOpen={openAccordion === \"Gender\"} setIsOpen={() => toggleAccordion(\"Gender\")} title={\"Gender\"}>\r\n        <FlexWrapper justify={\"space-between\"}  wrap={\"wrap\"} gap={\"10px\"} >\r\n          {arrayNamesButtonsForGender.map((item, index) => (\r\n            <Button\r\n              key={item}\r\n              isClicked={filters.gender === item.toLowerCase()}\r\n              onClick={() => handleClickButtonStatus(\"gender\", item.toLowerCase(), item)}\r\n            >\r\n              {item}\r\n            </Button>\r\n          ))}\r\n        </FlexWrapper>\r\n      </Accordion>\r\n\r\n    </StyledOptions>\r\n  );\r\n};\r\n\r\nconst StyledOptions = styled.div`\r\n    min-width: 330px;\r\n   `\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n`","import {FlexWrapper} from \"../../../common/components/FlexWrapper\";\r\nimport {Button} from \"../../../common/components/button/Button\";\r\nimport styled from \"styled-components\";\r\nimport {theme} from \"../../../styles/Theme\";\r\n\r\n\r\ntype Props = {\r\n  onSearchCharacters: (search: string) => void;\r\n  value: string;\r\n  setValue: (name: string) => void;\r\n};\r\nexport const FormForSearchElement = ({ value, setValue, onSearchCharacters}: Props) => {\r\n\r\n\r\n\r\n\r\n\r\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = event.currentTarget.value;\r\n    setValue(newValue)\r\n    onSearchCharacters(newValue);\r\n  }\r\n\r\n\r\n  return (\r\n    // <FlexWrapper>\r\n    <Wrapper>\r\n      <StyledForm>\r\n        <StyledInput value={value} onChange={handleOnChange} placeholder={\"Search for Characters\"}/>\r\n      </StyledForm>\r\n      <Button color={\"white\"} bgColor={theme.colors.buttonBg} disableHover={false}>Search</Button>\r\n    </Wrapper>\r\n\r\n    // </FlexWrapper>\r\n  );\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    padding: 10px 15px;\r\n    font-size: 16px;\r\n    border: 2px solid #ccc;\r\n    min-width: 600px;\r\n    width: 100%;\r\n    border-radius: 8px;\r\n    outline: none;\r\n    transition: all 0.3s ease-in-out;\r\n    margin-right: 20px;\r\n\r\n    &:focus {\r\n        border-color: ${theme.colors.buttonBg};\r\n        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);\r\n    }\r\n\r\n    @media ${theme.media.tablet} {\r\n        min-width: 320px;\r\n        margin-right: 0;\r\n\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled(FlexWrapper)`    \r\n    justify-content: center;\r\n      @media ${theme.media.tablet} {\r\n          flex-direction: column;\r\n          align-items: center;\r\n          gap: 20px;\r\n      }\r\n`","import {Pagination} from \"@mui/material\";\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Card} from \"../../common/components/card/Card\";\r\nimport {FlexWrapper} from \"../../common/components/FlexWrapper\";\r\nimport {useGetCharactersQuery} from \"./charactersApi\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Title} from \"../../common/components/title/Title\";\r\nimport {Skeleton} from \"../../common/components/card/Skeleton\";\r\nimport {Options} from \"../../common/components/options/Options\";\r\nimport {FormForSearchElement} from \"./FormForSearchElement/FormForSearchElement\";\r\nimport {useTheme} from \"../../app/ThemeContextProvider\";\r\nimport {Character} from \"../../utils/types/types\";\r\nimport {theme} from \"../../styles/Theme\";\r\n\r\n\r\nconst Characters = () => {\r\n\r\n  const {enterTheme} = useTheme()\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n  const [filters, setFilters] = useState({\r\n    status: \"\",\r\n    gender: \"\",\r\n    species: \"\"\r\n  });\r\n\r\n  const [nameCharacter, setNameCharacter] = useState(\"\");\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const {data, isFetching, isLoading,} = useGetCharactersQuery({page: currentPage, ...filters, nameCharacter});\r\n\r\n  const page = data?.info.pages;\r\n\r\n  const characters: Character[] = data?.results || [];\r\n\r\n  const filteredCharacters: Character[] = characters.filter((character) =>\r\n    character.name.toLowerCase().includes(nameCharacter.toLowerCase())\r\n  );\r\n\r\n  const handleFilteredCharacters = (btnName: string, title: string) => {\r\n    setFilters((prevFilters) => {\r\n\r\n\r\n      let newFilters = {...prevFilters};\r\n\r\n      if (title === \"status\") {\r\n        newFilters.status = btnName;\r\n      }\r\n      if (title === \"gender\") {\r\n        newFilters.gender = btnName;\r\n      }\r\n      if (title === \"species\") {\r\n        newFilters.species = btnName;\r\n      }\r\n\r\n      setCurrentPage(1);\r\n\r\n      return newFilters;\r\n    });\r\n  };\r\n\r\n  const handlerSearchCharacters = (name: string) => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1)\r\n    }\r\n    setNameCharacter(name)\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setFilters({status: \"\", gender: \"\", species: \"\"})\r\n    setNameCharacter('')\r\n    setValue(\"\");\r\n  }\r\n\r\n  const handlerOnChange = (_: ChangeEvent<unknown>, page: number) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  return (\r\n    <StyledCharacters>\r\n\r\n      <FlexWrapper justify={\"center\"}>\r\n        <Title enterTheme={enterTheme}>Characters</Title>\r\n      </FlexWrapper>\r\n\r\n      <WrapperForForm>\r\n        <FlexWrapper justify={\"center\"}>\r\n          <FormForSearchElement onSearchCharacters={handlerSearchCharacters} value={value} setValue={setValue}/>\r\n        </FlexWrapper>\r\n      </WrapperForForm>\r\n\r\n      {/*<FlexWrapper>*/}\r\n      <Wrapper>\r\n        <WrapperForOptions>\r\n          <Options handleClick={handleFilteredCharacters} clearFilters={clearFilters} filters={filters}/>\r\n        </WrapperForOptions>\r\n\r\n        <FlexWrapper justify={\"space-around\"} wrap={\"wrap\"} gap={\"10px\"} >\r\n          {isLoading ? (\r\n            Array.from({length: 9}).map((_, index) => <Skeleton key={index}/>)\r\n\r\n          ) : filteredCharacters.map((character) => (\r\n            <NavLink key={character?.id} to={`/characters/${character?.id}`}>\r\n              <Card\r\n                img={character?.image}\r\n                name={character?.name}\r\n                location={character?.location?.name}\r\n                status={character?.status}\r\n              />\r\n            </NavLink>\r\n          ))\r\n          }\r\n        </FlexWrapper>\r\n        {/*</FlexWrapper>*/}\r\n      </Wrapper>\r\n\r\n\r\n      <Pagination style={{display: \"flex\", justifyContent: \"center\", margin: \"20px 0\"}}\r\n                  variant=\"outlined\"\r\n                  shape=\"rounded\"\r\n                  onChange={handlerOnChange}\r\n                  count={page ?? 1}\r\n                  page={currentPage}\r\n      />\r\n    </StyledCharacters>\r\n\r\n  );\r\n};\r\n\r\nconst StyledCharacters = styled.div`\r\n    margin-top: 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nconst WrapperForForm = styled.div`\r\n    margin-bottom: 50px;`\r\n\r\nconst WrapperForOptions = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-right: 50px;\r\n\r\n    @media ${theme.media.tablet} {\r\n        margin-right: 0;\r\n        margin-bottom: 20px;\r\n    }\r\n`\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    @media ${theme.media.tablet} {\r\n        flex-direction: column;\r\n\r\n        //justify-content: space-evenly;\r\n    }\r\n`\r\nexport default Characters;","import {theme} from \"./Theme\";\r\n\r\nexport const getTextColor = (enterTheme: string, firstColor: any, secondColor: any) =>\r\n  enterTheme === \"light\" ? firstColor : secondColor;\r\n\r\n  // enterTheme === \"light\" ? theme.lightTheme.text : theme.darkTheme.text;\r\n"],"names":["lightThemeText","theme","lightTheme","text","darkThemeText","darkTheme","lightThemeBackgroundColor","firstBg","darkThemeBackgroundColor","Card","props","enterTheme","useTheme","_jsxs","StyledProjectsCard","status","children","WrapperImg","_jsx","Image","src","img","alt","name","StatusWrapper","Status","WrapperInfo","CharacterName","CartText","location","styled","div","_templateObject","_taggedTemplateLiteral","_ref","getTextColor","media","tablet","mobile","p","_templateObject2","_ref2","_templateObject3","_ref3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","StyledStatus","$status","TitleOptions","h3","Title","h2","Skeleton","StyledSkeletonCard","SkeletonImage","SkeletonInfo","SkeletonText","width","loading","keyframes","SkeletonBlock","Button","isClicked","onClick","title","bgColor","border","color","disableHover","_objectWithoutProperties","_excluded","StyledButton","_objectSpread","button","_ref4","undefined","_ref5","Accordion","setIsOpen","isOpen","StyledAccordion","AccordionHeader","handlerOnClick","Arrow","AccordionContent","colors","buttonBg","body","span","Options","handleClick","clearFilters","filters","openAccordion","setOpenAccordion","useState","selected","setSelected","species","gender","handleClickButtonStatus","category","value","word","prev","toggleAccordion","StyledOptions","Wrapper","FlexWrapper","justify","wrap","gap","map","item","index","toLowerCase","FormForSearchElement","setValue","onSearchCharacters","StyledForm","StyledInput","onChange","event","newValue","currentTarget","placeholder","form","input","StyledCharacters","WrapperForForm","WrapperForOptions","Characters","currentPage","setCurrentPage","setFilters","nameCharacter","setNameCharacter","data","isFetching","isLoading","useGetCharactersQuery","page","info","pages","filteredCharacters","results","filter","character","includes","handleFilteredCharacters","btnName","prevFilters","newFilters","Array","from","length","_","_character$location","NavLink","to","concat","id","image","Pagination","style","display","justifyContent","margin","variant","shape","handlerOnChange","count","firstColor","secondColor"],"sourceRoot":""}